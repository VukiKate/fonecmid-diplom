#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
 
#Область ОбработчикиСобытий

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	СформироватьДвижения();
	
	РассчитатьОклад();
	СформироватьПроцентОтРабот();
	РассчитатьОтпуск();
	
	РассчитатьНДФЛ();
	СформироватьВзаиморасчетыССотрудниками();
		
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Процедура СформироватьДвижения()
	
	СформироватьДвиженияОсновныеНачисления();
	СформироватьДвиженияУдержания();
    
	СформироватьСторноЗаписи();
	
	Движения.ВКМ_ОсновныеНачисления.Записать();
	Движения.ВКМ_Удержания.Записать();
	
КонецПроцедуры


Процедура СформироватьДвиженияОсновныеНачисления()
	
	Для Каждого Строка Из Начисления Цикл
		
			Движение = Движения.ВКМ_ОсновныеНачисления.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, Строка);
			Движение.ПериодДействияНачало = Строка.ДатаНачала;
			Движение.ПериодДействияКонец = КонецДня(Строка.ДатаОкончания);
			Движение.ПериодРегистрации = Дата;
			
		Если Строка.ВидРасчета = ПланыВидовРасчета.ВКМ_ОсновныеНачисления.Отпуск Тогда
			
			Движение.БазовыйПериодНачало = НачалоМесяца(ДобавитьМесяц(Строка.ДатаНачала, -12));
			Движение.БазовыйПериодКонец = КонецМесяца(ДобавитьМесяц(Строка.ДатаОкончания, -1));
			
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.ВКМ_ОсновныеНачисления.Записать();
		
КонецПроцедуры

Процедура СформироватьДвиженияУдержания()
	
	Для Каждого Строка Из Начисления Цикл
		
		Движение = Движения.ВКМ_Удержания.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, Строка);
		Движение.ПериодДействияНачало = Строка.ДатаНачала;
		Движение.ПериодДействияКонец = Строка.ДатаОкончания;
		Движение.ПериодРегистрации = Дата;
		Движение.БазовыйПериодНачало = НачалоМесяца(Строка.ДатаНачала);
		Движение.БазовыйПериодКонец = КонецМесяца(Строка.ДатаОкончания);
		Движение.ВидРасчета = ПланыВидовРасчета.ВКМ_Удержания.НДФЛ;
		
	КонецЦикла;
	
	Движения.ВКМ_Удержания.Записать();
	
КонецПроцедуры


Процедура СформироватьСторноЗаписи()
	
	СторноЗаписи = Движения.ВКМ_ОсновныеНачисления.ПолучитьДополнение();
	
	Для Каждого Строка Из СторноЗаписи Цикл
		
		Движение = Движения.ВКМ_ОсновныеНачисления.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, Строка);
		
		Движение.ПериодРегистрации = Дата;
		Движение.ПериодДействияНачало = Строка.ПериодДействияНачалоСторно;
		Движение.ПериодДействияКонец = Строка.ПериодДействияКонецСторно;
		Движение.Сторно = Истина;
		
	КонецЦикла;
	
КонецПроцедуры


Процедура РассчитатьОклад()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВКМ_ОсновныеНачисленияДанныеГрафика.НомерСтроки КАК НомерСтроки,
	|	ЕСТЬNULL(ВКМ_ОсновныеНачисленияДанныеГрафика.ЗначениеФактическийПериодДействия, 0) КАК Факт,
	|	ЕСТЬNULL(ВКМ_ОсновныеНачисленияДанныеГрафика.ЗначениеПериодДействия, 0) КАК План,
	|	ЕСТЬNULL(ВКМ_УсловияОплатыСотрудниковСрезПоследних.Оклад, 0) КАК Оклад
	|ИЗ
	|	РегистрРасчета.ВКМ_ОсновныеНачисления.ДанныеГрафика(
	|			Регистратор = &Ссылка
	|				И ВидРасчета = &Оклад) КАК ВКМ_ОсновныеНачисленияДанныеГрафика
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВКМ_УсловияОплатыСотрудников.СрезПоследних(
	|				&Период,
	|				Сотрудник В
	|					(ВЫБРАТЬ
	|						ВКМ_ОсновныеНачисления.Сотрудник КАК Сотрудник
	|					ИЗ
	|						РегистрРасчета.ВКМ_ОсновныеНачисления КАК ВКМ_ОсновныеНачисления
	|					ГДЕ
	|						ВКМ_ОсновныеНачисления.Регистратор = &Ссылка
	|						И ВКМ_ОсновныеНачисления.ВидРасчета = &Оклад)) КАК ВКМ_УсловияОплатыСотрудниковСрезПоследних
	|		ПО ВКМ_ОсновныеНачисленияДанныеГрафика.Сотрудник = ВКМ_УсловияОплатыСотрудниковСрезПоследних.Сотрудник";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("Оклад", ПланыВидовРасчета.ВКМ_ОсновныеНачисления.Оклад);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Движение = Движения.ВКМ_ОсновныеНачисления[Выборка.НомерСтроки - 1];

		Если Выборка.План = 0 Тогда
			Движение.Результат = 0;
		Иначе
			Движение.Результат = Выборка.Оклад * Выборка.Факт / Выборка.План;
			Движение.ОтработаноЧасов = Выборка.Факт;
			Движение.ОтработаноДней = Выборка.Факт/8;
			Движение.Показатель = Выборка.Оклад;
		КонецЕсли;
		
		Если Движение.Сторно Тогда
			
			Движение.Результат = - Движение.Результат;
			Движение.ОтработаноЧасов = - Движение.ОтработаноЧасов; 
			Движение.ОтработаноДней = - Движение.ОтработаноДней;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.ВКМ_ОсновныеНачисления.Записать(, Истина);	
	
КонецПроцедуры


Процедура СформироватьПроцентОтРабот()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВКМ_ОсновныеНачисления.НомерСтроки КАК НомерСтроки,
		|	ВКМ_ОсновныеНачисления.Показатель КАК Показатель,
		|	ВКМ_ОсновныеНачисления.ОтработаноЧасов КАК ОтработаноЧасов,
		|	ВКМ_ВыполненныеСотрудникомРаботы.СуммаКОплате КАК СуммаКОплате
		|ИЗ
		|	РегистрРасчета.ВКМ_ОсновныеНачисления КАК ВКМ_ОсновныеНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВКМ_ВыполненныеСотрудникомРаботы КАК ВКМ_ВыполненныеСотрудникомРаботы
		|		ПО ВКМ_ОсновныеНачисления.Сотрудник = ВКМ_ВыполненныеСотрудникомРаботы.Сотрудник
		|ГДЕ
		|	ВКМ_ОсновныеНачисления.ВидРасчета = &ПроцентОтРабот
		|	И ВКМ_ОсновныеНачисления.Регистратор = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ПроцентОтРабот", ПланыВидовРасчета.ВКМ_ОсновныеНачисления.ПроцентОтРабот);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Движение = Движения.ВКМ_ОсновныеНачисления[Выборка.НомерСтроки - 1];
		
		Движение.Показатель = Выборка.СуммаКОплате;
		Движение.Результат = Выборка.СуммаКОплате;
		Движение.ОтработаноЧасов = Неопределено; 
		
	КонецЦикла;
	
	Движения.ВКМ_ОсновныеНачисления.Записать(, Истина);
	
КонецПроцедуры


Процедура РассчитатьОтпуск()
	
   	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВКМ_ОсновныеНачисления.НомерСтроки КАК НомерСтроки,
		|	ЕСТЬNULL(ВКМ_ОсновныеНачисленияБазаВКМ_ДополнительныеНачисления.РезультатБаза, 0) КАК БазаДоп,
		|	ЕСТЬNULL(ВКМ_ОсновныеНачисленияБазаВКМ_ОсновныеНачисления.РезультатБаза, 0) КАК БазаОсн,
		|	ЕСТЬNULL(ВКМ_ОсновныеНачисленияБазаВКМ_ОсновныеНачисления.ОтработаноЧасовБаза, 0) КАК БазаОтработано,
		|	ЕСТЬNULL(ВКМ_ОсновныеНачисленияДанныеГрафика.ЗначениеФактическийПериодДействия, 0) КАК Факт,
		|	ЕСТЬNULL(ВКМ_ВыполненныеСотрудникомРаботы.СуммаКОплате, 0) КАК БазаПроцРаб,
		|	РАЗНОСТЬДАТ(ВКМ_ОсновныеНачисленияДанныеГрафика.ПериодДействияНачало, ВКМ_ОсновныеНачисленияДанныеГрафика.ПериодДействияКонец, ДЕНЬ) + 1 КАК ОтработаноДней
		|ИЗ
		|	РегистрРасчета.ВКМ_ОсновныеНачисления КАК ВКМ_ОсновныеНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ВКМ_ОсновныеНачисления.БазаВКМ_ОсновныеНачисления(
		|				&Измерения,
		|				&Измерения,
		|				,
		|				Регистратор = &Ссылка
		|					И ВидРасчета = &Отпуск) КАК ВКМ_ОсновныеНачисленияБазаВКМ_ОсновныеНачисления
		|		ПО ВКМ_ОсновныеНачисления.НомерСтроки = ВКМ_ОсновныеНачисленияБазаВКМ_ОсновныеНачисления.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ВКМ_ОсновныеНачисления.БазаВКМ_ДополнительныеНачисления(
		|				&Измерения,
		|				&Измерения,
		|				,
		|				Регистратор = &Ссылка
		|					И ВидРасчета = &Отпуск) КАК ВКМ_ОсновныеНачисленияБазаВКМ_ДополнительныеНачисления
		|		ПО ВКМ_ОсновныеНачисления.НомерСтроки = ВКМ_ОсновныеНачисленияБазаВКМ_ДополнительныеНачисления.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ВКМ_ОсновныеНачисления.ДанныеГрафика(
		|				Регистратор = &Ссылка
		|					И ВидРасчета = &Отпуск) КАК ВКМ_ОсновныеНачисленияДанныеГрафика
		|		ПО ВКМ_ОсновныеНачисления.НомерСтроки = ВКМ_ОсновныеНачисленияДанныеГрафика.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВКМ_ВыполненныеСотрудникомРаботы КАК ВКМ_ВыполненныеСотрудникомРаботы
		|		ПО ВКМ_ОсновныеНачисления.НомерСтроки = ВКМ_ВыполненныеСотрудникомРаботы.НомерСтроки
		|			И ВКМ_ОсновныеНачисления.Сотрудник = ВКМ_ВыполненныеСотрудникомРаботы.Сотрудник
		|ГДЕ
		|	ВКМ_ОсновныеНачисления.Регистратор = &Ссылка
		|	И ВКМ_ОсновныеНачисления.ВидРасчета = &Отпуск";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Отпуск", ПланыВидовРасчета.ВКМ_ОсновныеНачисления.Отпуск);

	Измерения = Новый Массив;
	Измерения.Добавить("Сотрудник");
    
	Запрос.УстановитьПараметр("Измерения", Измерения);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Движение = Движения.ВКМ_ОсновныеНачисления[ВыборкаДетальныеЗаписи.НомерСтроки - 1];
		
		Если ВыборкаДетальныеЗаписи.БазаОтработано = 0 Тогда
			Движение.Результат = 0;
			Продолжить;
		КонецЕсли;
		
		Движение.Результат = (ВыборкаДетальныеЗаписи.БазаОсн + ВыборкаДетальныеЗаписи.БазаДоп + ВыборкаДетальныеЗаписи.БазаПроцРаб) * ВыборкаДетальныеЗаписи.Факт / ВыборкаДетальныеЗаписи.БазаОтработано ; 
		Движение.Показатель = ВыборкаДетальныеЗаписи.БазаОсн + ВыборкаДетальныеЗаписи.БазаДоп + ВыборкаДетальныеЗаписи.БазаПроцРаб;
        Движение.ОтработаноЧасов = ВыборкаДетальныеЗаписи.Факт;
		Движение.ОтработаноДней = ВыборкаДетальныеЗаписи.ОтработаноДней;
		
		Если Движение.Сторно Тогда
			
			Движение.Результат = - Движение.Результат;
			Движение.ОтработаноЧасов = - Движение.БазаОтработано;
            Движение.ОтработаноДней = - Движение.ОтработаноДней;

		КонецЕсли;
		
	КонецЦикла;
	
	Движения.ВКМ_ОсновныеНачисления.Записать(, Истина);
	
КонецПроцедуры


Процедура РассчитатьНДФЛ()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВКМ_УдержанияБазаВКМ_ОсновныеНачисления.НомерСтроки КАК НомерСтроки,
		|	ВКМ_УдержанияБазаВКМ_ОсновныеНачисления.Сотрудник КАК Сотрудник,
		|	ВКМ_УдержанияБазаВКМ_ОсновныеНачисления.РезультатБаза КАК Показатель,
		|	ВЫБОР
		|		КОГДА ВКМ_УдержанияБазаВКМ_ОсновныеНачисления.РезультатБаза <> 0
		|			ТОГДА ВКМ_УдержанияБазаВКМ_ОсновныеНачисления.РезультатБаза / 100 * 13
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Результат
		|ИЗ
		|	РегистрРасчета.ВКМ_Удержания.БазаВКМ_ОсновныеНачисления(&Измерение, &Измерение, , Регистратор = &Ссылка) КАК ВКМ_УдержанияБазаВКМ_ОсновныеНачисления";
	
	Измерения = Новый Массив;
	Измерения.Добавить("Сотрудник");
	
	Запрос.УстановитьПараметр("Измерение", Измерения); 
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать(); 
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Движение = Движения.ВКМ_Удержания[ВыборкаДетальныеЗаписи.НомерСтроки - 1];
		
		ЗаполнитьЗначенияСвойств(Движение, ВыборкаДетальныеЗаписи);
		
		Движение.ПериодРегистрации = Дата;
		Движение.Показатель = ВыборкаДетальныеЗаписи.Показатель;
		
	КонецЦикла;
	
	Движения.ВКМ_Удержания.Записать();
	
КонецПроцедуры


Процедура СформироватьВзаиморасчетыССотрудниками()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	   "ВЫБРАТЬ
	   |	ВКМ_ОсновныеНачисления.Сотрудник КАК Сотрудник,
	   |	СУММА(ВКМ_ОсновныеНачисления.Результат) КАК Показатель,
	   |	СУММА(ВКМ_Удержания.Результат) КАК Результат,
	   |	СУММА(ВКМ_ОсновныеНачисления.Результат - ВКМ_Удержания.Результат) КАК СуммаКВыплате
	   |ИЗ
	   |	РегистрРасчета.ВКМ_ОсновныеНачисления КАК ВКМ_ОсновныеНачисления
	   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ВКМ_Удержания КАК ВКМ_Удержания
	   |		ПО ВКМ_ОсновныеНачисления.Сотрудник = ВКМ_Удержания.Сотрудник
	   |			И ВКМ_ОсновныеНачисления.Регистратор = ВКМ_Удержания.Регистратор
	   |ГДЕ
	   |	ВКМ_ОсновныеНачисления.Регистратор = &Ссылка
	   |
	   |СГРУППИРОВАТЬ ПО
	   |	ВКМ_ОсновныеНачисления.Сотрудник";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка); 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Движение = Движения.ВКМ_ВзаиморасчетыССотрудниками.ДобавитьПриход();
		
		ЗаполнитьЗначенияСвойств(Движение, ВыборкаДетальныеЗаписи);
		Движение.Период = Дата;
		Движение.Сумма = ВыборкаДетальныеЗаписи.СуммаКВыплате; 
		
	КонецЦикла;
	
   	Движения.ВКМ_ВзаиморасчетыССотрудниками.Записывать = Истина;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли






